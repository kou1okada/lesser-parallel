#!/usr/bin/env bash

# Lesser Parallel
# Copyright (c) 2014 Koichi OKADA. All rights reserved.
# The official repository is:
# https://github.com/kou1okada/lesser-parallel
# This script is distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

LESSER_PARALLEL_MAX_JOBS=${LESSER_PARALLEL_MAX_JOBS:-8}

function lesser-parallel-get-jobs-count ()
#   Get number of current runnning jobs.
{
  jobs -l >/dev/null
  jobs -l | wc -l
}

function lesser-parallel-restrict-jobs-count () # <maxjobs>
#   Wait the number of running jobs will be reduced
#   if the number of current runnning jobs is over <maxjobs>.
{
  while (( $1 <= $(lesser-parallel-get-jobs-count) )); do
    sleep 0.2
  done
}

function lesser-parallel () # [<command> [<arguments> ...]] < <list_to_arguments>
#   Execute <command> by parallel.
# Arguments:
#   Each jobs receive input line from STDIN into placeholders.
#   Placeholders will be substituted with input line as below:
#   {}   : Input line.
#   {.}  : Input line without extention (pathname).
#   {/}  : Input line without directory (basename).
#   {//} : Input line without basename (dirname).
#   {/.} : Input line without directory and extension (basename without suffix).
#   {#}  : Job sequence number of paralell.
{
  local cmd arg line basename ext PARALLEL_SEQ=1
  while read line; do
    basename="$(basename "$line")"
    ext="${basename##*.}"
    [[ "$ext" == "$basename" ]] && ext=""
    [[ "$ext" != "" ]] && ext=".$ext"
    cmd=( )
    for arg; do
      case "$arg" in
      "{}")   cmd+=( "$line" ) ;;
      "{.}")  [[ -z "$ext" ]] && cmd+=( "$line" ) || cmd+=( "${line%.*}" ) ;;
      "{/}")  cmd+=( "$basename" ) ;;
      "{//}") cmd+=( "$(dirname "$line")" ) ;;
      "{/.}") cmd+=( "$(basename "$basename" "$ext")" ) ;;
      "{#}")  cmd+=( "$PARALLEL_SEQ" ) ;;
      *)      cmd+=( "$arg" ) ;;
      esac
    done
    
    lesser-parallel-restrict-jobs-count $LESSER_PARALLEL_MAX_JOBS
    
    "${cmd[@]}" &
    let PARALLEL_SEQ++
  done
  
  lesser-parallel-restrict-jobs-count 1
}

function lesser-xargs () # [<options> ...] <command> [<initial-args> ...]
#   Build and execute command line from standard input.
# Arguments:
#   -0, -null               : items are separated by a null, not whitespace.
#   -d, --delimiter=<delim> : items are separated by a <delim>.
#   -n, --max-args=<n>      : use at most <n> arguments per command line.
#   -P, --max-procs=<P>     : run at most <P> processes at a time.
{
  local lines opt delim=( -d " " ) maxargs maxprocs=1
  while [ "x${1:0:1}" = "x-" ]; do
    opt="$1"
    [[ "$1" =~ = ]] && set -- "${1%%=*}" "${1#*=}" "${@:2}"
    case "$1" in
      -0|--null) delim+=( -d $'\0' );          shift ;;
      -d|--delimiter) delim=( -d "${@:2:1}" ); shift 2 || { error "Option requires an argument: $opt"; exit 1; } ;;
      -n|--max-args)  maxargs="$2";            shift 2 || { error "Option requires an argument: $opt"; exit 1; } ;;
      -P|--max-procs) maxprocs="$2";           shift 2 || { error "Option requires an argument: $opt"; exit 1; } ;;
      *) error "Unknown option: $1"; exit 1 ;;
    esac
  done
  
  readarray "${delim[@]}" -t lines
  [ -z "$maxargs" ] && maxargs="${#lines[@]}"
  (( maxprocs <= 0 )) && maxprocs=$LESSER_PARALLEL_MAX_JOBS
  while (( 0 < ${#lines[@]} )); do
    if (( 1 < maxprocs )); then
      lesser-parallel-restrict-jobs-count $maxprocs
      "${@:-echo}" "${lines[@]:0:maxargs}" &
    else
      "${@:-echo}" "${lines[@]:0:maxargs}"
    fi
    lines=( "${lines[@]:maxargs}" )
  done
  
  lesser-parallel-restrict-jobs-count 1
}

#/Lesser Parallel

function lesser-parallel-help ()
{
  cat <<-EOD
	Usage:
	  ${SCRIPTNAME} [<options>] [<command> [<arguments> ...]] < <list_to_arguments>
	  cat ... | ${SCRIPTNAME} [<options>] [<command> [<arguments> ...]]
	Options:
	  -j <n>      : Run <n> jobs in parallel.
	  -e [<file>] : Embed Lesser Parallel to <file>.
	  -h, --help  : Display help and ext.
	Arguments:
	  Each jobs receive input line from STDIN into placeholders.
	  Placeholders will be substituted with input line as below:
	  {}   : Input line.
	  {.}  : Input line without extention (pathname).
	  {/}  : Input line without directory (basename).
	  {//} : Input line without basename (dirname).
	  {/.} : Input line without directory and extension (basename without suffix).
	  {#}  : Job sequence number of paralell.
	
	EOD
}

function lesser-parallel-embed () # [<target file>]
#   Display lesser-parallel for embed or embed it into <target file>.
#   <target file> must have embedding markers.
{
  local LINES="$(wc -l < "$SCRIPTFILE")"
  local code
  code="$(grep -A "$LINES" "^# Lesser Parallel" "$SCRIPTFILE" \
         | grep -B "$LINES" "^#/Lesser Parallel" \
         | awk '{print $0 ($0 ~ /^#[ /]Lesser Parallel/ ? " for Embedding" : "")}')" #"
  if [[ -f "$1" ]]; then
    awk -v code="$code" '
      /^# Lesser Parallel for Embedding/ {embedded = embed = 1; print code}
      !embed {print $0}
      /^#\/Lesser Parallel for Embedding/ {embed = 0}
      END {exit embedded != 1}
    ' "$1" > "$1.tmp$$"
    if (( $? == 0 )); then
      mv "$1" "$1.$(date -d "$(stat "$1" -c %y)" "+%Y%m%d_%H%M%S")~"
      mv "$1.tmp$$" "$1"
      echo "Lesser Parallel is Embedded to $1."
    else
      echo "$1 has no embeddig markers."
    fi
  else
    echo "$code"
  fi
}

SCRIPTNAME="${0##*/}"
SCRIPTFILE="$(realpath "$(which $0)")"

while (( 0 < $# )); do
  if (( ${#ARGS[@]} == 0 )); then
    case "$1" in
    -j)
      LESSER_PARALLEL_MAX_JOBS="$2"
      shift 2 || break
      ;;
    -e)
      lesser-parallel-embed "$2"
      exit
      ;;
    -h|--help)
      lesser-parallel-help
      exit
      ;;
    *)
      ARGS+=( "$1" )
      shift
      ;;
    esac
  else
    ARGS+=( "$1" )
    shift
  fi
done

if (( ${#ARGS[@]} <= 0 )); then
  lesser-parallel-help
  exit 1
fi >&2

lesser-parallel "${ARGS[@]}"
